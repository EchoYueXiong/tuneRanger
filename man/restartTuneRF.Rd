% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restartTuneRF.R
\name{restartTuneRF}
\alias{restartTuneRF}
\title{restartTuneRF}
\usage{
restartTuneRF(save.file.path = "./optpath.RData", task, measure = NULL)
}
\arguments{
\item{save.file.path}{File to which interim results were saved. Default is optpath.RData in the current working}

\item{task}{The mlr task created by \code{\link[mlr]{makeClassifTask}} or \code{\link[mlr]{makeRegrTask}}.}

\item{measure}{Performance measure that was already used in the original \code{\link{tuneRF}} process.}
}
\value{
list with recommended parameters and data.frame with all evaluated hyperparameters and performance and time results for each run
}
\description{
Restarts the tuning process if an error occured.
}
\examples{
library(tuneRF)
library(mlr)

# iris is a bit nonsense here
# A mlr task has to be created in order to use the package
# the already existing iris task is used here
unlink("./optpath.RData")
estimateTuneRFTime(iris.task)
res = tuneRF(iris.task, measure = list(multiclass.brier), num.trees = 1000, 
  num.threads = 8, iters = 100)

# Best 5 \% of the results
results = res$results
results[results$multiclass.brier < quantile(results$multiclass.brier, 0.05),]

# Restart after failing in one of the iterations:
res = restartTuneRF("./optpath.RData", iris.task, measure = list(multiclass.brier))

}
